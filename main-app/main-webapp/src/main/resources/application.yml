spring:
    application:
        name: Main-APP
    profiles:
        # The commented value for `active` can be replaced with valid spring profiles to load.
        # Otherwise, it will be filled in by maven when building the WAR file
        # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
        active: '@spring.profiles.active@'

    liquibase:
        enabled: false
        change-log: classpath:/liquibase/master.xml
    jpa:
        open-in-view: false
        hibernate:
            naming:
                physical-strategy: gt.app.hibernate.PrefixedNamingStrategy
                implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    cloud:
        openfeign:
            micrometer:
                enabled: true
    security:
        oauth2:
            client:
                # we are using authorization code flow (login within keycloak app web ui)
                provider:
                    oidc:
                        # use http://localhost:8082/realms/articleapp/.well-known/openid-configuration to get config from keycloak
                        issuer-uri: http://localhost:${KEYCLOAK_PORT:8082}/realms/seedapp
                registration:
                    oidc:
                        #                        authorization-grant-type: refresh_token
                        client-id: seed-app-gateway-client
                        client-secret: secret123
                        scope: openid, profile, email, offline_access # last one for refresh tokens
                    # we can have multiple auth providers
server:
    port: 8081

logging:
    level:
        security: INFO
        web: INFO
        cloud: INFO
        sql: INFO
        ROOT: INFO
        gt: TRACE
#        'org.springframework.web.socket': TRACE


app-properties:
    jms:
        content-checkerrequest-queue: jms-content-checker-requestqueue
        content-checkercallback-response-queue: jms-content-checkercallback-responsequeue
    file-storage:
        upload-folder: ${java.io.tmpdir}/uploads
    web:
        base-url: http://localhost:${server.port}
wro4j:
    jmx-enabled: false
    debug: true
    manager-factory:
        post-processors: cssVariables,cssMinJawr,jsMin
        pre-processors: cssUrlRewriting,cssImport,semicolonAppender,removeSourceMaps,singlelineStripper
    filter-url: /wro4j # this is the default, needs to be used in secConfig and the htmls

# https://github.com/gavlyukovskiy/spring-boot-data-source-decorator
# note that both `jdbc.datasource-proxy` and `decorator.datasource` cannot be enabled at same time due to bean name conflict
decorator:
    datasource:
        enabled: true  # disabled for now
        flexy-pool:
            threshold:
                connection:
                    acquire: -1
                    lease: 0
        datasource-proxy:
            slow-query:
                threshold: 1 # 1 second is slow
            query:
                log-level: INFO
# https://github.com/jdbc-observations/datasource-micrometer
jdbc:
    datasource-proxy:
        enabled: false

management:
    tracing:
        sampling:
            probability: 1.0
    zipkin:
        tracing:
            endpoint: http://localhost:9411/api/v2/spans
    health:
        jms:
            enabled: true
